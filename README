Vlermv
==================
Vlermv makes it easy to save Python
objects to files with meaningful identifiers.
You should concern yourself primarily with these two elements.

``vlermv.Vlermv``
    Class that helps you use the filesystem like a dictionary.
``vlermv.cache``
    Decorator that helps you use ``vlermv.Vlermv`` for caching the output of a function.


Better than Mongo
---------------------
Vlermv is nearly better than Mongo, so you should use it anywhere
where you were previously using Mongo. Vlermv is designed for
write-heavy workloads that need scalability (easy sharding), flexible
schemas, and highly configurable indexing.

Things that are missing for a full Mongo replacement

* Protection against inode exhaustion
* Ability to treate a directory as a document and thus to make atomic edits within a document
* Transactions (Mongo `doesn't have them <http://docs.mongodb.org/manual/tutorial/perform-two-phase-commits/>`_, but they would be cool.)
* Indices maybe? In case you want an index on something other than the filename

ACID properties
----------------------------
Atomicity
    Writes are made to a temporary file that gets renamed.
Consistency
    No validation is supported, so the database is always consistent by definition.
Isolation
    Vlermv has isolation within files/documents/values but not across. You may implement your own multi-file transactions.
Durability
    All data are saved to disk right away.

Other interesting features
-----------------------------
All values have exactly one index (the key/filename). Until other indices
are implemented, you can build other indices as other vlermv instances.

You can implement sharding by mounting different directories on different
hard driver or computers. For example, the "March 2014" and "April 2014"
directories could be on different hard drives, and then you could save your
data as "March 2014/2014-03-01", "March 2014/2014-03-02", ...,
"April 2014/2014-04-01", "March 2014/2014-04-02", ....

Vlermv has protection against using up all of the space in your hard drive.
When you instantiate a vlermv, a large file is written to the `.tmp` directory
of the vlermv database (10 mb by default). If there is not enough space to
write the file, an error is raised. If the filesystem runs out of space while
saving something, a similar error is raised and the `.tmp` directory is
deleted. This strategy is chosen to reduce calls to the hard drive and to
be simple; it is intented to protect against accidents rather than attacks.

History
---------------------
I wrote `pickle warehouse <https://pypi.python.org/pypi/pickle-warehouse>`_
so I could easily store pickles in files with meaningful names.
Then I extended it to support more than just pickles. Then I wrote
`picklecache <https://pypi.python.org/pypi/picklecache>`_, mainly for caching
responses to HTTP requests.

And then I finally changed the names because these two packages don't really
have much to do with pickles. ``pickle_warehouse.Warehouse`` became
``vlermv.Vlermv``, and ``picklecache.cache`` became ``vlermv.cache``.
I chose the name "vlermv" by banging on the keyboard; this is how I have
been naming things now that I have discovered Dada.

During the transition from pickle warehouse and pickle cache to vlermv,
I also added a particular feature that I wanted: the ability to refresh
the cache. (And I implemented this by subclassing ``vlermv.Vlermv``, as
discussed in the documentation above.)
