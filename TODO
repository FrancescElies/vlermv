To do
=======

Documentation

* Remove flippant comments.
* Change "database" language to "file-dictionary-function mapper".
* Add a discussion at the beginning about shell file access, my distrust
    of my ability to write software that keeps working, and the merits
    of simplicity.

Make an exception like this.

    class InvalidName(ValueError):
        pass

Raise that error if a key cannot be determined. Maybe add a function like
`AbstractVlermv.validate` that goes through all of the `keys` and reports which
ones are bad.

Serializers

* I should be able to set an "extension" property of the serializer.
    If this is set, the extension will be appended to filenames.
* I should be able to pass an iterable of serializers, rather than just
    a single serializer. If I do this, the serializers will be composed.

Transformers: Set a regular expression or PyParsing parser or something.

* When loading resources with ``keys()``, emit only resources whose
    filenames match the expression.
* For complicated filenames, you can reference this expression in the
    ``from_path`` and ``to_path`` functions.
* When saving resources, raise an error if the expression is not met.

Fancy relevant Python 3.5 features

* https://www.python.org/dev/peps/pep-0471/
* https://www.python.org/dev/peps/pep-0492/


Add an ``inherit_contains`` kwarg that falls back to wrapped vlermvs for
calls to the ``__contains__`` method when the present
vlermv does not contain the stuff. Consider the following scenario

    @vlermv.Vlermv.memoize('~/.abc')
    @vlermv.S3Vlermv.memoize('abc')
    def abc(x):
        return 'squash'

    S3abc = vlermv.S3Vlermv('abc')[1234] = 'carrots'
    
    assert (1234,) not in abc

Without ``inherit_contains``, ``(1234,)`` is not in ``abc`` because
``(1234,)`` is not stored in ``~/.abc``. It *is* in the "abc" S3 bucket,
but we don't know that because we never check.

    @vlermv.Vlermv.memoize('~/.abc', inherit_contains = True)
    @vlermv.S3Vlermv.memoize('abc')
    def abc(x):
        return 'squash'

    S3abc = vlermv.S3Vlermv('abc')[1234] = 'carrots'
    
    assert (1234,) in abc

When we set ``inherit_contains = True``, we pass ``__contains__`` to the
S3Vlermv; we use the local Vlermv for caching the data, but we use the
S3Vlermv for checking whether data exist.

The following assertions work the same in both cases.

    assert (1234,) in abc
    assert S3abc(1234) == 'carrots'
    assert abc(1234) == 'carrots'

    vlermv.S3Vlermv.memoize('abc', inherit_contains = True)

More documentation changes to keep up with the new features

* Setting of the extension
* The raw key transformer
* The compressed pickle serializer
* S3Vlermv, including
  * Safe bucket
  * Timeouts
* Stacking of vlermvs, and inheritance of __contains__
* Why you need to inherit functions when you implement a new vlermv backend
